(function() {var implementors = {};
implementors["wasmer_types"] = [{"text":"impl&lt;K, V&gt; <a class=\"trait\" href=\"wasmer_types/lib/std/ops/trait.Index.html\" title=\"trait wasmer_types::lib::std::ops::Index\">Index</a>&lt;K&gt; for <a class=\"struct\" href=\"wasmer_types/entity/struct.BoxedSlice.html\" title=\"struct wasmer_types::entity::BoxedSlice\">BoxedSlice</a>&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: <a class=\"trait\" href=\"wasmer_types/entity/trait.EntityRef.html\" title=\"trait wasmer_types::entity::EntityRef\">EntityRef</a>,&nbsp;</span>","synthetic":false,"types":["wasmer_types::entity::boxed_slice::BoxedSlice"]},{"text":"impl&lt;K, V&gt; <a class=\"trait\" href=\"wasmer_types/lib/std/ops/trait.Index.html\" title=\"trait wasmer_types::lib::std::ops::Index\">Index</a>&lt;K&gt; for <a class=\"struct\" href=\"wasmer_types/entity/struct.PrimaryMap.html\" title=\"struct wasmer_types::entity::PrimaryMap\">PrimaryMap</a>&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: <a class=\"trait\" href=\"wasmer_types/entity/trait.EntityRef.html\" title=\"trait wasmer_types::entity::EntityRef\">EntityRef</a>,&nbsp;</span>","synthetic":false,"types":["wasmer_types::entity::primary_map::PrimaryMap"]},{"text":"impl&lt;K, V&gt; <a class=\"trait\" href=\"wasmer_types/lib/std/ops/trait.Index.html\" title=\"trait wasmer_types::lib::std::ops::Index\">Index</a>&lt;K&gt; for <a class=\"struct\" href=\"wasmer_types/entity/struct.SecondaryMap.html\" title=\"struct wasmer_types::entity::SecondaryMap\">SecondaryMap</a>&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: <a class=\"trait\" href=\"wasmer_types/entity/trait.EntityRef.html\" title=\"trait wasmer_types::entity::EntityRef\">EntityRef</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,&nbsp;</span>","synthetic":false,"types":["wasmer_types::entity::secondary_map::SecondaryMap"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()