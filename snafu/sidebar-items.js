initSidebarItems({"derive":[["Snafu","See the crate-level documentation for SNAFU which contains tested examples of this macro."]],"macro":[["ensure","Ensure a condition is true. If it is not, return from the function with an error."]],"mod":[["futures","Additions to the `TryFuture` and `TryStream` traits."],["guide","SNAFU user's guideOnce you've got a high-level idea of what SNAFU can do by looking at the quick example and some more examples, take a peek at our design philosophy."]],"struct":[["Backtrace","A backtrace starting from the beginning of the thread."],["NoneError","A temporary error type used when converting an `Option` into a `Result`"]],"trait":[["AsErrorSource","Converts the receiver into an `Error` trait object, suitable for use in `Error::source`."],["ErrorCompat","Backports changes to the `Error` trait to versions of Rust lacking them."],["GenerateBacktrace","Construct a backtrace, allowing it to be optional."],["IntoError","Combines an underlying error with additional information about the error."],["OptionExt","Additions to `Option`."],["ResultExt","Additions to `Result`."]]});