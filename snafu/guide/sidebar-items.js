initSidebarItems({"mod":[["attributes","Attributes understood by the `Snafu` macroControlling `Display`There are a number of ways you can specify how the `Display` trait will be implemented for each variant:"],["comparison","Comparisons to similar librariesThis section of the guide contains comparisons of other popular libraries and SNAFU, as well as lightweight migration tips to SNAFU from those libraries."],["compatibility","Rust version compatibilitySNAFU is tested and compatible back to Rust 1.31, released on 2018-12-06. Compatibility is controlled by Cargo feature flags. (There are currently no features that require Rust beyond 1.31, and therefore no version-specific feature flags.)"],["examples","Examples of using SNAFU"],["feature_flags","Optional extensions to the crateIn addition to the feature flags controlling compatibility, there are Cargo feature flags that extend SNAFU for various use cases:"],["generics","Using generic typesError types enhanced by SNAFU may contain generic type and lifetime parameters."],["opaque","How to create opaque error types for public APIsWhile creating error types on top of Rust enums allows for great flexibility inside your code, that same flexibility may not be desired in a public API. Public enums also expose their variants and the variant's fields, allowing consumers to rely on those details."],["philosophy","SNAFU's design philosophySNAFU believes in several points that are reflected in its design, development, and maintenance. Knowing them may help users more effectively use SNAFU."],["structs","Struct errorsYou may not always need the flexibility of an enum for your error type. In those cases, you can use the familiar SNAFU attributes with a struct:"],["the_macro","Details about the output of the `Snafu` macroThis procedural macro:"],["upgrading","Upgrading from previous releasesVersion 0.5 → 0.6Version 0.4 → 0.5Version 0.3 → 0.4Version 0.2 → 0.3Version 0.1 → 0.2Version 0.5 → 0.6Minimum supported version of Rust is now 1.31If you are writing a library, you will need to increase your minimum supported version of Rust to 1.31 or better. If you are writing an application, you should be able to upgrade your installed compiler by the same mechanism that you installed it."]]});